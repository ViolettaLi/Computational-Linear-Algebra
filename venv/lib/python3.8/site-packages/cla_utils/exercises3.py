import numpy as np
from numpy import linalg
from scipy.linalg import solve_triangular



def householder(A, kmax=None):
    """
    Given a real mxn matrix A, find the reduction to upper triangular matrix R
    using Householder transformations.

    :param A: an mxn-dimensional numpy array
    :param kmax: an integer, the number of columns of A to reduce \
    to upper triangular. If not present, will default to n.

    :return R: an mxn-dimensional numpy array containing the upper \
    triangular matrix
    """

    m, n = A.shape
    if kmax is None:
        kmax = n
    for k in range(kmax):
        x = 1.0 * A[k : m, k]
        v_k = x
        if x[0] == 0:
            s = 1
        else:
            s = x[0] / abs(x[0])
        #v_k[0] = v_k[0] + x[0]/np.linalg.norm(x[0]) * np.sqrt(np.conjugate(x).dot(x))
        v_k[0] = v_k[0] + s * np.sqrt(np.dot(x, np.conjugate(x)))
        #np.sign(x[0])
        v_k = v_k / np.sqrt(np.conjugate(v_k).dot(v_k))
        A[k : m, k : n] = A[k : m, k : n] - 2 * np.outer(v_k, np.matmul(np.conjugate(v_k), A[k : m, k : n]))
    R = A
    return R


def householder_solve(A, b):
    """
    Given a real mxm matrix A, use the Householder transformation to solve
    Ax_i=b_i, i=1,2,...,k.

    :param A: an mxm-dimensional numpy array
    :param b: an mxk-dimensional numpy array whose columns are the \
    right-hand side vectors b_1,b_2,...,b_k.

    :return x: an mxk-dimensional numpy array whose columns are the \
    right-hand side vectors x_1,x_2,...,x_k.
    """
    m, n = A.shape
    A_hat = np.c_[A, b]
    R = householder(A_hat, n)
    #R_hat is the first n columns of R
    R_hat = R[:, :n]
    #b_hat = Q_star * b is the other columns of R
    b_hat = R[:, n:]
    x = solve_triangular(R_hat, b_hat)
    

    return x


def householder_qr(A):
    """
    Given a real mxn matrix A, use the Householder transformation to find
    the full QR factorisation of A.

    :param A: an mxn-dimensional numpy array

    :return Q: an mxm-dimensional numpy array
    :return R: an mxn-dimensional numpy array
    """
    m, n = A.shape
    #The b here can be in form of identity with size m
    b_I = np.identity(m, dtype = A.dtype)
    A_hat = np.c_[A, b_I]
    R = householder(A_hat, n)
    R_hat = R[:, :n]
    #Q_star * b = b_hat, and b here is b_I in the identity form, so we can get that Q_star = b_hat
    b_hat = R[:, n:]
    Q_star = b_hat
    Q = np.transpose(np.conjugate(Q_star))
    R = R_hat

    return Q, R


def householder_ls(A, b):
    """
    Given a real mxn matrix A and an m dimensional vector b, find the
    least squares solution to Ax = b.

    :param A: an mxn-dimensional numpy array
    :param b: an m-dimensional numpy array

    :return x: an n-dimensional numpy array
    """
    m, n = A.shape
    A_hat = np.c_[A, b]
    R = householder(A_hat, n)
    R_hat = R[:n, :n]
    #b_hat here is the last columns of R
    b_hat = R[:n, n]
    x = solve_triangular(R_hat, b_hat)

    return x
