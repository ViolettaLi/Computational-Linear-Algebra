import numpy as np
import numpy.random as random
from numpy import linalg
from cla_utils.exercises4 import operator_2_norm
from cla_utils.exercises8 import ev
from cla_utils.exercises3 import householder_solve
from cla_utils.exercises3 import householder_qr
from cla_utils.exercises2 import GS_modified

def get_A100():
    """
    Return A100 matrix for investigating QR factoration.

    :return A: The 100x100 numpy array
    """
    m = 100
    random.seed(1111*m)
    A = random.randn(m, m) + 1j*random.randn(m, m)
    return A


def get_B100():
    """
    Return B100 matrix for investigating QR factoration.

    :return A: The 100x100 numpy array
    """
    m = 100
    random.seed(1111*m)
    A = random.randn(m, m) + 1j*random.randn(m, m)
    A[np.tril_indices(m, -2)] = 0
    return A


def get_C100():
    """
    Return C100 matrix for investigating QR factoration.

    :return A: The 100x100 numpy array
    """
    m = 100
    random.seed(1111*m)
    A = random.randn(m, m) + 1j*random.randn(m, m)
    A = 0.5*(A + np.conj(A).T)
    return A


def get_D100():
    """
    Return D100 matrix for investigating QR factoration.

    :return A: The 100x100 numpy array
    """
    m = 100
    random.seed(1111*m)
    A = random.randn(m, m) + 1j*random.randn(m, m)
    A = 0.5*(A + np.conj(A).T)
    A[np.tril_indices(m, -2)] = 0
    A[np.triu_indices(m, 2)] = 0
    return A


def get_A3():
    """
    Return A3 matrix for investigating power iteration.
    
    :return A3: a 3x3 numpy array.
    """

    return np.array([[ 0.68557183+0.46550108j,  0.12934765-0.1622676j ,
                    0.24409518+0.25335939j],
                  [ 0.1531015 +0.66678983j,  0.45112492+0.18206976j,
                    -0.02633966+0.43477693j],
                  [-0.10817164-1.16879196j, -0.18446849+0.03755672j,
                   0.06430325-0.44757084j]])


def get_B3():
    """
    Return B3 matrix for investigating power iteration.

    :return B3: a 3x3 numpy array.
    """
    return np.array([[ 0.46870499+0.37541453j,  0.19115959-0.39233203j,
                    0.12830659+0.12102382j],
                  [ 0.90249603-0.09446345j,  0.51584055+0.84326503j,
                    -0.02582305+0.23259079j],
                  [ 0.75419973-0.52470311j, -0.59173739+0.48075322j,
                    0.51545446-0.21867957j]])


def pow_it(A, x0, tol, maxit, store_iterations = False):
    """
    For a matrix A, apply the power iteration algorithm with initial
    guess x0, until either 

    ||r|| < tol where

    r = Ax - lambda*x,

    or the number of iterations exceeds maxit.

    :param A: an mxm numpy array
    :param x0: the starting vector for the power iteration
    :param tol: a positive float, the tolerance
    :param maxit: integer, max number of iterations
    :param store_iterations: if True, then return the entire sequence \
    of power iterates, instead of just the final iteration. Default is \
    False.

    :return x: an m dimensional numpy array containing the final iterate, or \
    if store_iterations, an mxmaxit dimensional numpy array containing all \
    the iterates.
    :return lambda0: the final eigenvalue.
    """
    x = x0
    r = 1
    m, m = A.shape
    x_seq = np.zeros((m, maxit), dtype = A.dtype)
    for k in range(1, maxit + 1):
        if r > tol:
            w = np.matmul(A, x)
            # Normalised x
            x = w/np.linalg.norm(w)
            lambda0 = np.dot(x.T, np.matmul(A, x))
            r = np.linalg.norm(np.dot(A, x) - lambda0 * x)
            x_seq[:, k - 1] = x
    if store_iterations:
        return x_seq, lambda0
    else:
        return x, lambda0


def inverse_it(A, x0, mu, tol, maxit, store_iterations = False):   
    """
    For a Hermitian matrix A, apply the inverse iteration algorithm
    with initial guess x0, using the same termination criteria as
    for pow_it.

    :param A: an mxm numpy array
    :param mu: a floating point number, the shift parameter
    :param x0: the starting vector for the power iteration
    :param tol: a positive float, the tolerance
    :param maxit: integer, max number of iterations
    :param store_iterations: if True, then return the entire sequence \
    of inverse iterates, instead of just the final iteration. Default is \
    False.

    :return x: an m dimensional numpy array containing the final iterate, or \
    if store_iterations, an mxmaxit dimensional numpy array containing \
    all the iterates.
    :return l: a floating point number containing the final eigenvalue \
    estimate, or if store_iterations, an m dimensional numpy array containing \
    all the iterates.
    """
    x = x0
    r = 1
    m, n = A.shape
    x_seq = np.zeros((m, maxit), dtype = A.dtype)
    I = np.identity(m)
    for k in range(1, maxit + 1):
        if r > tol:
            solm = A - mu * I
            w = householder_solve(solm, x)
            # Normalised x
            x = w/np.linalg.norm(w)
            l = np.dot(np.conjugate(x).T, np.matmul(A, x))
            r = np.linalg.norm(np.dot(A, x) - l * x)
            x_seq[:, k - 1] = x.T
    if store_iterations:
        return x_seq, l
    else:
        return x, l


def rq_it(A, x0, tol, maxit, store_iterations = False):   
    """
    For a Hermitian matrix A, apply the Rayleigh quotient algorithm
    with initial guess x0, using the same termination criteria as
    for pow_it.

    :param A: an mxm numpy array
    :param x0: the starting vector for the power iteration
    :param tol: a positive float, the tolerance
    :param maxit: integer, max number of iterations
    :param store_iterations: if True, then return the entire sequence \
    of inverse iterates, instead of just the final iteration. Default is \
    False.

    :return x: an m dimensional numpy array containing the final iterate, or \
    if store_iterations, an mxmaxit dimensional numpy array containing \
    all the iterates.
    :return l: a floating point number containing the final eigenvalue \
    estimate, or if store_iterations, an m dimensional numpy array containing \
    all the iterates.
    """
    x = x0
    l = np.dot(x.T, np.matmul(A, x))
    r = np.linalg.norm(np.dot(A, x) - l * x)
    m, n = A.shape
    I = np.identity(m)
    x_seq = np.zeros((m, maxit), dtype = A.dtype)
    for k in range(1, maxit + 1):
        if r > tol:
            solm = A - l * I
            w = householder_solve(solm, x)
            # Normalised x
            x = w/np.linalg.norm(w)
            l = np.dot(np.conjugate(x).T, np.matmul(A, x))
            r = np.linalg.norm(np.dot(A, x) - l * x)
            x_seq[:, k - 1] = x.T
    if store_iterations:
        return x_seq, l
    else:
        return x, l


def pure_QR(A, maxit, tol, sym = False, return_t = False, shift = False):
    """
    For matrix A, apply the QR algorithm and return the result.

    :param A: an mxm numpy array
    :param maxit: the maximum number of iterations
    :param tol: termination tolerance

    :return Ak: the result
    """
    m,m=A.shape
    A0 = 1.0 * A
    r = np.linalg.norm(A0[np.tril_indices(m, -1)])/m**2
    t_array=np.array([])
    i=0
    if sym and shift == True:
        while i <= maxit and r > tol:
            a = A0[m - 1, m - 1]
            delta = (A0[m - 2,m - 2] - A0[m - 1,m - 1])/2
            b = A0[m - 1, m - 2]
            mu = a - np.sign(delta) * (b**2)/(abs(delta) + np.sqrt(delta**2 + b**2))
            Q0,R0 = householder_qr(A0 - mu * np.identity(m))
            A0 = np.dot(R0,Q0) + mu * np.identity(m)
            #r=np.abs(A0[m-1,m-2])
            r = np.linalg.norm(A0[np.tril_indices(m, -1)])/m**2
            t_array = np.append(t_array, abs(A0[m-1, m-2]))
            i += 1
            if abs(A0[m - 1, m - 2]) < 1e-12:
                break
    elif sym == True:
        while i <= maxit and r>tol:
            Q0, R0 = householder_qr(A0)
            A0 = np.dot(R0, Q0)
            #r = np.abs(A0[m-1,m-2])
            r = np.linalg.norm(A0[np.tril_indices(m, -1)])/m**2
            t_array = np.append(t_array,abs(A0[m - 1, m - 2]))
            i += 1
            if abs(A0[m - 1, m - 2]) < 1e-12:
                break
    else:
        while i <= maxit and r > tol:
            Q0, R0 = householder_qr(A0)
            A0 = np.dot(R0, Q0)
            #r = np.abs(A0[m-1,m-2])
            r = np.linalg.norm(A0[np.tril_indices(m, -1)])/m**2
            i += 1
            
    if return_t == True:
        return A0, t_array, i
    return A0


